apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ APP_NAME }}-{{ DEPLOY_ENV }}
  namespace: {{ NAMESPACE }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ APP_NAME }}-{{ DEPLOY_ENV }}
      app.kubernetes.io/instance: {{ APP_NAME }}
      app.kubernetes.io/name: {{ APP_NAME }}
      environment: {{ DEPLOY_ENV }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ APP_NAME }}-{{ DEPLOY_ENV }}
        app.kubernetes.io/instance: {{ APP_NAME }}
        app.kubernetes.io/name: {{ APP_NAME }}
        environment: {{ DEPLOY_ENV }}
    spec:
      containers:
      - env:
        - name: LC_ALL
          value: en_US.utf-8
        - name: LANG
          value: en_US.utf-8
        args:
        - python server/app.py
        command:
        - conda
        - run
        - -n
        - aispeech
        - /bin/bash
        - -c
        image: {{ CI_REGISTRY_IMAGE }}:{{ CI_COMMIT_SHA }}
        imagePullPolicy: IfNotPresent
        name: {{ APP_NAME }}
        ports:
        - containerPort: 8888
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: "8"
            memory: 30G
            nvidia.com/gpu: "1"
          requests:
            cpu: "6"
            memory: 20G
            nvidia.com/gpu: "1"
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/pretrained_models
          name: jupyterhub-shared-model
          subPath: small_jin/TTS/tts-service/GPT-SoVITS/pretrained_models
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      nodeSelector:
        workload_type: gpu
      tolerations:
      - effect: NoSchedule
        key: workload_type
        operator: Equal
        value: gpu
      volumes:
      - name: jupyterhub-shared-model
        persistentVolumeClaim:
          claimName: jupyter-shared-fast
---
apiVersion: v1
kind: Service
metadata:
  name: {{ APP_NAME }}-{{ DEPLOY_ENV }}-svc
  namespace: aigc
spec:
  ports:
  - name: htt
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: {{ APP_NAME }}-{{ DEPLOY_ENV }}
    app.kubernetes.io/instance: {{ APP_NAME }}
    app.kubernetes.io/name: {{ APP_NAME }}
    environment: {{ DEPLOY_ENV }}
  sessionAffinity: None
  type: ClusterIP
